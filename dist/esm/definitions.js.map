{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAEA,MAAM,CAAN,IAAY,kBAUX;AAVD,WAAY,kBAAkB;IAC5B,4FAAyB,CAAA;IACzB,8FAA0B,CAAA;IAC1B,wFAAuB,CAAA;IACvB,4FAAyB,CAAA;IACzB,wFAAuB,CAAA;IACvB,wFAAuB,CAAA;IACvB,8EAAkB,CAAA;IAClB,wFAAuB,CAAA;IACvB,wGAA+B,CAAA;AACjC,CAAC,EAVW,kBAAkB,KAAlB,kBAAkB,QAU7B;AAED,MAAM,CAAN,IAAY,oBAQX;AARD,WAAY,oBAAoB;IAC9B,qGAA2B,CAAA;IAC3B,6FAAuB,CAAA;IACvB,qIAA2C,CAAA;IAC3C,iGAAyB,CAAA;IACzB,2FAAsB,CAAA;IACtB,qIAA2C,CAAA;IAC3C,kGAA0B,CAAA;AAC5B,CAAC,EARW,oBAAoB,KAApB,oBAAoB,QAQ/B","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport enum ErrorCodeReference {\n  PUSH_PROVISION_ERROR = -1,\n  PUSH_PROVISION_CANCEL = -2,\n  MISSING_DATA_ERROR = -3,\n  CREATE_WALLET_CANCEL = -4,\n  IS_TOKENIZED_ERROR = -5,\n  REMOVE_TOKEN_ERROR = -6,\n  INVALID_TOKEN = -7,\n  SELECT_TOKEN_ERROR = -8,\n  SET_DEFAULT_PAYMENTS_ERROR = -9\n}\n\nexport enum TokenStatusReference {\n  TOKEN_STATE_UNTOKENIZED = 1,\n  TOKEN_STATE_PENDING = 2,\n  TOKEN_STATE_NEEDS_IDENTITY_VERIFICATION = 3,\n  TOKEN_STATE_SUSPENDED = 4,\n  TOKEN_STATE_ACTIVE = 5,\n  TOKEN_STATE_FELICA_PENDING_PROVISIONING = 6,\n  TOKEN_STATE_NOT_FOUND = -1,\n}\n\nexport interface GooglePayAddress {\n  /**\n   * Address name\n   *\n   * @since 1.0.0\n   */\n  name: string;\n\n  /**\n   * Full address\n   *\n   * @since 1.0.0\n   */\n  address1: string;\n\n  /**\n   * Apartment/Office\n   *\n   * @since 1.0.0\n   */\n  address2?: string;\n\n  /**\n   * Locality\n   *\n   * @since 1.0.0\n   */\n  locality: string;\n\n  /**\n   * Administrative area\n   *\n   * @since 1.0.0\n   */\n  administrativeArea: string;\n\n  /**\n   * Country code\n   *\n   * @since 1.0.0\n   */\n  countryCode: string;\n\n  /**\n   * Postal code\n   *\n   * @since 1.0.0\n   */\n  postalCode: string;\n\n  /**\n   * Phone number\n   *\n   * @since 1.0.0\n   */\n  phoneNumber: string;\n}\n\n\nexport interface GooglePayProvisionOptions {\n  /**\n   * Sets Opaque Payment Card binary data.\n   *\n   * @since 1.0.0\n   */\n  opc: string;\n\n  /**\n   * Sets the TSP that should be used for the tokenization attempt (see TokenServiceProvider).\n   *\n   * @since 1.0.0\n   */\n  tsp: string;\n\n  /**\n   * Sets the clientName that should be used for the tokenization attempt (see TokenServiceProvider).\n   *\n   * @since 1.0.0\n   */\n  clientName: string;\n\n  /**\n   * Sets the lastDigits that should be used for the tokenization attempt (see TokenServiceProvider).\n   *\n   * @since 1.0.0\n   */\n  lastDigits: string;\n\n  /**\n   * Sets the address that should be used for the tokenization attempt (see TokenServiceProvider).\n   *\n   * @since 1.0.0\n   */\n  address: GooglePayAddress;\n}\n\nexport interface GooglePayIsTokenizedOptions {\n  /**\n   * Sets the TSP that should be used for the tokenization attempt (see TokenServiceProvider).\n   *\n   * @since 1.0.0\n   */\n  tsp: string;\n\n  /**\n   * Sets the lastDigits that should be used for the tokenization attempt (see TokenServiceProvider).\n   *\n   * @since 1.0.0\n   */\n  lastDigits: string;\n}\n\nexport interface GooglePayTokenOptions {\n  /**\n   * Sets the TSP that should be used for the tokenization attempt (see TokenServiceProvider).\n   *\n   * @since 1.0.0\n   */\n  tsp: string;\n\n  /**\n   * token registered to the active wallet\n   *\n   * @since 1.0.0\n   */\n  tokenReferenceId: string;\n}\n\nexport interface GooglePayPlugin {\n  /**\n   * Event called when an action is performed on a pusn notification.\n   * @param eventName pushNotificationActionPerformed.\n   * @param listenerFunc callback with the notification action.\n   *\n   * @since 1.0.0\n   */\n  addListener(eventName: 'registerDataChangedListener', listenerFunc: (response: any) => void): PluginListenerHandle;\n\n  removeAllListeners(): void;\n\n  /**\n   * returns the environment (e.g. production or sandbox)\n   * @return {Promise<{ value: string }>}\n   *\n   * @since 1.0.0\n   */\n  getEnvironment(): Promise<{ value: 'PROD' | 'SANDBOX' | 'DEV' }>;\n\n  /**\n   * returns the stable hardware ID of the device\n   * @return {Promise<{ hardwareId: string }>}\n   *\n   * @since 1.0.0\n   */\n  getStableHardwareId(): Promise<{ hardwareId: string }>;\n\n  /**\n   * returns the ID of the active wallet\n   * @return {Promise<{ walletId: string }>}\n   *\n   * @since 1.0.0\n   */\n  getActiveWalletID(): Promise<{ walletId: string }>;\n\n  /**\n   *  Initializes create wallet\n   * @return {Promise<{ isCreated: boolean }>}\n   *\n   * @since 4.0.1\n   */\n  createWallet(): Promise<{ isCreated: boolean }>;\n\n  /**\n   * returns the status of a token with a given token ID\n   * @param options {GooglePayTokenOptions} Token Options\n   * @return {Promise<any>}\n   *\n   * @since 1.0.0\n   */\n  getTokenStatus(options: GooglePayTokenOptions): Promise<{ state: TokenStatusReference, code: string }>;\n\n  /**\n   * returns a list of tokens registered to the active wallet\n   * @return {Promise<{tokens: string[]}>}\n   *\n   * @since 1.0.0\n   */\n  listTokens(): Promise<{ tokens: string[] }>;\n\n  /**\n   *  Starts the push tokenization flow\n   * @param options.tsp {string} Sets the TSP that should be used for the tokenization attempt (see TokenServiceProvider).\n   * @param options.lastDigits {string} Sets the TSP that should be used for the tokenization attempt (see TokenServiceProvider).\n   * @return {Promise<{isTokenized: string}>}\n   *\n   * @since 1.0.0\n   */\n  isTokenized(options: GooglePayIsTokenizedOptions): Promise<{ isTokenized: boolean }>;\n\n  /**\n   *  Starts the push tokenization flow\n   * @param options.opc {string} Sets Opaque Payment Card binary data.\n   * @param options.tsp {string} Sets the TSP that should be used for the tokenization attempt (see TokenServiceProvider).\n   * @param options.clientName {string} Sets the TSP that should be used for the tokenization attempt (see TokenServiceProvider).\n   * @param options.lastDigits {string} Sets the TSP that should be used for the tokenization attempt (see TokenServiceProvider).\n   * @param options.address {GooglePayAddress} Sets the TSP that should be used for the tokenization attempt (see TokenServiceProvider).\n   * @return {Promise<{tokenId: string}>}\n   *\n   * @since 1.0.0\n   */\n  pushProvision(options: GooglePayProvisionOptions): Promise<{ tokenId: string }>;\n\n  /**\n   *  Requests setting token as default in Google Pay\n   * @param options {GooglePayTokenOptions} Token Options\n   * @return {Promise<{ isSuccess: boolean }>}\n   *\n   * @since 1.0.0\n   */\n  requestSelectToken(options: GooglePayTokenOptions): Promise<{ isSuccess: boolean }>;\n\n  /**\n   *  Requests deleting token from Google Pay\n   * @param options {GooglePayTokenOptions} Token Options\n   * @return {Promise<{ isSuccess: boolean }>}\n   *\n   * @since 4.0.13\n   */\n  requestDeleteToken(options: GooglePayTokenOptions): Promise<{ isSuccess: boolean }>;\n\n  /**\n   *  Check if Google Pay is Default NFC payment App\n   * @return {Promise<{ isDefault: boolean, isNFCOn: boolean }>}\n   *\n   * @since 4.0.4\n   */\n  isGPayDefaultNFCApp(): Promise<{ isDefault: boolean, isNFCOn: boolean }>;\n\n  /**\n   *  Sets Google Pay as Default NFC payment App\n   * @return {Promise<{ isDefault: boolean }>}\n   *\n   * @since 4.0.4\n   */\n  setGPayAsDefaultNFCApp(): Promise<{ isDefault: boolean }>;\n\n  /**\n   * returns the status of a token with a given token ID\n   * @return {Promise<any>}\n   *\n   * @since 1.0.0\n   */\n  registerDataChangedListener(): Promise<any>;\n}\n"]}